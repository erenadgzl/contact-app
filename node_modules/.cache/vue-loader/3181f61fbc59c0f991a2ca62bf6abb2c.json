{"remainingRequest":"/Users/erenadiguzel/vueprojects/contacts-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erenadiguzel/vueprojects/contacts-project/src/components/ContactForm.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/erenadiguzel/vueprojects/contacts-project/src/components/ContactForm.vue","mtime":1582631121450},{"path":"/Users/erenadiguzel/vueprojects/contacts-project/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erenadiguzel/vueprojects/contacts-project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/erenadiguzel/vueprojects/contacts-project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/erenadiguzel/vueprojects/contacts-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erenadiguzel/vueprojects/contacts-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmJvZHkgewogIHBhZGRpbmc6IDFyZW07Cn0K"},{"version":3,"sources":["ContactForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA","file":"ContactForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <b-form @submit.stop.prevent=\"onSubmit\">\n      <b-form-group id=\"example-input-group-1\" label=\"Name\" label-for=\"example-input-1\">\n        <b-form-input\n          id=\"example-input-1\"\n          name=\"example-input-1\"\n          v-model=\"$v.form.name.$model\"\n          :state=\"validateState('name')\"\n          aria-describedby=\"input-1-live-feedback\"\n        ></b-form-input>\n\n        <b-form-invalid-feedback\n          id=\"input-1-live-feedback\"\n        >This is a required field and must be at least 3 characters.</b-form-invalid-feedback>\n      </b-form-group>\n\n      <b-form-group id=\"example-input-group-2\" label=\"Food\" label-for=\"example-input-2\">\n        <b-form-select\n          id=\"example-input-2\"\n          name=\"example-input-2\"\n          v-model=\"$v.form.food.$model\"\n          :options=\"foods\"\n          :state=\"validateState('food')\"\n          aria-describedby=\"input-2-live-feedback\"\n        ></b-form-select>\n\n        <b-form-invalid-feedback id=\"input-2-live-feedback\">This is a required field.</b-form-invalid-feedback>\n      </b-form-group>\n\n      <b-button type=\"submit\" variant=\"primary\">Submit</b-button>\n      <b-button class=\"ml-2\" @click=\"resetForm()\">Reset</b-button>\n    </b-form>\n  </div>\n</template>\n\n<style>\nbody {\n  padding: 1rem;\n}\n</style>\n\n<script>\nimport { validationMixin } from \"vuelidate\";\nimport { required, minLength } from \"vuelidate/lib/validators\";\n\nexport default {\n  mixins: [validationMixin],\n  data() {\n    return {\n      foods: [\n        { value: null, text: \"Choose...\" },\n        { value: \"apple\", text: \"Apple\" },\n        { value: \"orange\", text: \"Orange\" }\n      ],\n      form: {\n        name: null,\n        food: null\n      }\n    };\n  },\n  validations: {\n    form: {\n      food: {\n        required\n      },\n      name: {\n        required,\n        minLength: minLength(3)\n      }\n    }\n  },\n  methods: {\n    validateState(name) {\n      const { $dirty, $error } = this.$v.form[name];\n      return $dirty ? !$error : null;\n    },\n    resetForm() {\n      this.form = {\n        name: null,\n        food: null\n      };\n\n      this.$nextTick(() => {\n        this.$v.$reset();\n      });\n    },\n    onSubmit() {\n      this.$v.form.$touch();\n      if (this.$v.form.$anyError) {\n        return;\n      }\n\n      alert(\"Form submitted!\");\n    }\n  }\n};\n</script>"]}]}